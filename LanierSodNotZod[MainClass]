//AUTHOR: WILLIAM LANIER
//COURSE: CPT 187
//PURPOSE: The purpose of this class is to conduct the user's transactions in purchasing a variety of items. The program starts by showing a welcome 
//message and a menu displays with the option to either login, create an account, or quit the program. The user starts by creating an account, without
//an account they can't login. The user creates their account by inputting their chosen username and password, with an error displaying if the username
//input already exists. The user will then login, with an error displaying if the username or password entered does not exist or if the password is not 
//cased correctly. The user is then shown a new menu and continues by loading the inventory as they can't purchase any items if none are in-stock. The 
//user then enters the ID of their chosen item. The user then chooses how many units of the item they will purchase, if the amount the user inputs is 
//more than what's left in-stock, an error will display. Once the quantity purchased is locked in, the user chooses one of three discounts. When a 
//discount is chosen, an order report is then printed and the order reports' values are transfered to another file. After the report is printed the user 
//can load the inventory again, create a new order or quit to the main menu. If the user chooses to quit to the main menu, they can either create a new 
//account, login again, or quit the program, if the user choose to quit the program a final report is displayed showing the item ID, name, and price 
//along with the quantity purchased and total cost, below this a grand total cost is displayed for all the user's orders that were cataloged, then a 
//farewell message is displayed and the program stops.
//STARTDATE: 9-28-20
package edu.cpt187.lanier.exercise6;

//Importing of Scanner
import java.util.Scanner;

public class MainClass 

//Start of Public Class
{
	//Declaring Class Constants
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args)
	//Start of Main Method
	{
		//Declaration/Initialization of a Scanner class object named input
		Scanner input = new Scanner(System.in);

		//Declaration/Initialization of a Order class object named currentOrder 
		Order currentOrder = new Order();

		//Declaration/Initialization of an Inventory class object named currentInventory
		Inventory currentInventory = new Inventory();

		//Declaration/Initialization of a WriteOrder class object named orders with the value INVENTORY_FILE_NAME
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);

		//Declaration/Initialization of a UserAccounts class object named currentUser with the value ACCOUNTS_FILE_NAME
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//Declaring main method variables
		String userName = "";
		char menuSelection = ' ';

		//Welcome Banner
		displayWelcomeBanner();

		//Obtaining menuSelection by invoking the method validateMainMenu
		menuSelection = validateMenuSelection(input);

		//Run-while loop until menuSelection == 'Q' 
		while(menuSelection != 'Q')
		{
			//Sets the values inside the userNames and passwords arrays.
			currentUser.setUserAccountArrays();

			//Obtaining userName
			userName = getUserName(input);

			//Runs if menuSelection != 'A'
			if(menuSelection != 'A')
			{
				//Invokes the assignment behavior for searchIndex
				currentUser.setSearchedIndex(userName);

				//Runs if searchedIndex is 0 or greater
				if(currentUser.getSearchedIndex() >= 0)
				{
					//Username Already Exists Announcement
					displayAccountResults(userName);
				}//End of IF
				else
				{
					//Writes the userName and password to a new file
					currentUser.setWriteOneRecord(userName, getPassword(input));

					//Account Results
					displayAccountResults();
				}//End of ELSE
			}//End of IF(menuSelection !- 'A')
			else
			{
				//Invokes the overloaded assignment behavior for searchedIndex
				currentUser.setSearchedIndex(userName, getPassword(input));

				//Displays login error if searchedIndex < 0
				if(currentUser.getSearchedIndex() < 0)
				{
					//Login Error
					displayLoginError();
				}//End of IF
				else
				{
					//Invoking File Menu
					menuSelection = validateFileSelection(input);

					//Run-while loop until menuSelection == 'R'
					while(menuSelection != 'R')
					{
						//Runs if menuSelection == 'A'
						if(menuSelection == 'A')
						{
							//Obtains the file Name
							currentInventory.setLoadItems(getFileName(input));

							//Displays a File error when the file name is invalid,
							//otherwise displays Record Report
							if (currentInventory.getRecordCount() <= 0)
							{
								//File Error
								displayFileError();
							}//End of IF
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//End of ELSE
						}//End of IF(MenuSelection == 'A')

						//Run if menuSelection != 'A'
						else
						{


							//Sets the searchIndex by user Input
							currentInventory.setSearchIndex(validateSearchValue(input));

							//Displays a Not Found Error is itemSearchIndex is invalid
							if(currentInventory.getItemSearchIndex() < 0)
							{
								//Not Found Error
								displayNotFound();
							}//End of IF

							//Runs if itemSearchIndex is valid
							else
							{
								//Invoking appropriate behaviors from the supportive classes
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setHowMany(validateHowMany(input));

								//Displays Out of Stock Error if inStockCounts is less than howMany,
								//else continue with the program
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//End of IF
								else 
								{
									//Invoking appropriate behaviors from the supportive classes
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(),
											currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									//Invoke behavior for writing to the file
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(),
											currentOrder.getHowMany(), currentOrder.getTotalCost());

									//Runs if discountRate > 0.0
									if(currentOrder.getDiscountRate() > 0.0)
									{
										//Order Report with discount values.
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(),
												currentOrder.getHowMany(), currentOrder.getDiscountName(),
												currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(),
												currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));

									}//End of IF(currentOrder.getDiscountRate() > 0.0)

									//Runs if discountRate is Zero.
									else
									{
										//Order Report without discount values
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(),
												currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));

									}//End of ELSE
								}//End of ELSE
							}//End of ELSE
						}//End of ELSE

						//Modifies the Loop Control Variable
						menuSelection = validateFileSelection(input);
					}//End of Run-while loop
				}//End of ELSE
			}//End of ELSE

			//Modifies the Loop Control Variable
			menuSelection = validateMenuSelection(input);
		}//End of run-while loop until menuSelection == 'Q'

		//Loads items from the written file
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		//Displays final Report if recordCount is greater than 0
		if(orders.getRecordCount() > 0)
		{
			//Final Report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(),
					currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(),
					currentInventory.getRecordCount(), currentInventory.getGrandTotal());	
		}//End of IF

		//Farewell Message
		displayFarewellMessage();

		//Closure of Scanner input
		input.close();
	}//End of Main Method

	//Start of VOID methods

	//Welcome Banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to our new improved ordering program! Our program");
		System.out.println("will calculate the transaction price for a variety of");
		System.out.println("items while accounting for discounts and the amount of");
		System.out.println("an item the user decided to purchase.");
	}//End of displayWelcomeBanner

	//Farewell Message
	public static void displayFarewellMessage()
	{
		System.out.println("\nThank you for using our ordering program.");
		System.out.println("Go and have a wonderful rest of your day!!");
	}//End of displayFarewellMessage

	//Account Results Announcement
	public static void displayAccountResults()
	{
		System.out.println("\n**************************************************");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("**************************************************");
	}//End of displayAccountResults

	//Overloaded Account Results Announcement(Username Already Exists Error)
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("\n**************************************************");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("\n%-21s%-10s%-17s", "Account not created: username, ", borrowedUserName, ", already exists");
		System.out.println("\n**************************************************");
	}//End of displayAccountResults

	//Login Error
	public static void displayLoginError()
	{
		System.out.println("\n**************************************************");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("**************************************************");
	}//End of displayLoginError

	//User Name Prompt
	public static void displayUserName()
	{
		System.out.println("\n******************************");	
		System.out.println("Enter your username:");
	}//End of displayUserName

	//Password Prompt
	public static void displayPassword()
	{
		System.out.println("\n******************************");	
		System.out.println("Enter your password:");
	}//End of displayPassword

	//Main Menu
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("\n**********************************");
		System.out.println("MAIN MENU:");
		System.out.println("**********************************");

		//Run-while loop used to run through array
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-2s%-4s%-13s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of Run-while loop
		System.out.println("**********************************");
		System.out.println("Please enter your selection here:");
	}//End of displayMainMenu

	//File Menu
	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println("\n**********************************");
		System.out.println("FILE MENU:");
		System.out.println("**********************************");

		//Run-while loop used to run through array
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-2s%-4s%-13s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of Run-while loop
		System.out.println("**********************************");
		System.out.println("Please enter your selection here:");
	}//End of displayFileMenu

	//File Name Prompt
	public static void displayFileName()
	{
		System.out.println("\n***************************************************");
		System.out.println("Enter the file name with extension (i,e. file.txt):");
	}//End of displayFileName

	//Search Value Prompt
	public static void displaySearchValue()
	{
		System.out.println("\n************************");
		System.out.println("Enter the search value:");
	}//End of displaySearchValue

	//Discount Menu
	public static void displayDiscountMenu(String[]borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println("\n*******************************");
		System.out.println("DISCOUNT MENU:");
		System.out.println("*******************************");

		//Run-while loop used to run through array
		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-2c%-4s%-11s%6.1f%2s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], (borrowedDiscountRates[localIndex] * 100), "%");
			localIndex++;
		}//End of Run-while loop
		System.out.println("*******************************");
		System.out.println("Please input your choice here:");
	}//End of displayDiscountMenu

	//Record Report
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("\n****************************");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3d%-18s", borrowedRecordCount , "records processed");
		System.out.println("\n****************************");
	}//End of displayRecordReport


	//Out of Stock Error
	public static void displayOutOfStock()
	{
		System.out.println("\n**********************************************************");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("**********************************************************");
	}//End of displayOutOfStock

	//File Error
	public static void displayFileError()
	{
		System.out.println("\n***************************************************");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("***************************************************");
	}//End of displayFileError

	//Not Found Error
	public static void displayNotFound()
	{
		System.out.println("\n*******************************");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value was not found");
		System.out.println("*******************************");
	}//End of displayNotFound

	//Order Report when discountRate > 0.0
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double 
			borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt,
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("\n**************************************************");
		System.out.println("ORDER REPORT:");
		System.out.println("**************************************************");
		System.out.printf("%-19s%-25s\n", "Customer Name:", borrowedUserName);
		System.out.printf("\n%-19s%-25s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-19s%-2s%7.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("\n%-19s%-25s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-19s%-2s%6.1f%2s\n", "Discount Rate:", " ", (borrowedDiscountRate * 100), "%");
		System.out.printf("%-19s%-2s%7.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-19s%-2s%7.2f\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.printf("\n%-19s%-2s%7d\n", "Quantity:", " ", borrowedHowMany);
		System.out.printf("\n%-19s%-2s%7.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-19s%-2s%6.1f%2s\n", "Tax Rate:", " ", (borrowedTaxRate * 100), "%");
		System.out.printf("%-19s%-2s%7.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.printf("\n%-19s%-2s%7.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("\n%-19s%-25s\n", "Prize:", borrowedPrizeName);
		System.out.printf("\n%-19s%-2d%s%-15s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "s left in-stock!");
		System.out.println("**************************************************");	
	}//End of displayOrderReport

	//Order Report if discountRate == 0.0
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, 
			String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("\n**************************************************");
		System.out.println("ORDER REPORT:");
		System.out.println("**************************************************");
		System.out.printf("%-19s%-25s\n", "Customer Name:", borrowedUserName);
		System.out.printf("\n%-19s%-25s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-19s%-2s%7.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("\n%-19s%-2s%7d\n", "Quantity:", " ", borrowedHowMany);
		System.out.printf("\n%-19s%-2s%7.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-19s%-2s%6.1f%2s\n", "Tax Rate:", " ", (borrowedTaxRate * 100), "%");
		System.out.printf("%-19s%-2s%7.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.printf("\n%-19s%-2s%7.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("\n%-19s%-25s\n", "Prize:", borrowedPrizeName);
		System.out.printf("\n%-19s%-2d%s%-15s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "s left in-stock");
		System.out.println("**************************************************");
	}//End of displayOrderReport


	//Final Report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices,
			int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{	
		int localIndex = 0;
		System.out.println("\n***************************************************");
		System.out.println("FINAL REPORT:");
		System.out.println("***************************************************");
		System.out.printf("%-4s%-24s%-9s%-6s%-9s", "ID", "NAME", "PRICE", "QTY", "TOTAL");

		//Run-while loop to run through array
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("\n%-4d%-24s%-2s%5.2f%3d%5s%-2s%6.2f", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex],
					borrowedOrderQuantities[localIndex], "    ", "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//End of Run-while loop

		System.out.println("\n\nGRAND TOTAL");
		System.out.printf("%-2s%7.2f", "$", borrowedGrandTotal);
		System.out.println("\n***************************************************");
	}//End of displayFinalReport

	//End of VOID methods

	//Beginning of VR methods

	//VR method used to obtain userName
	public static String getUserName(Scanner borrowedInput)
	{
		String userName = "";
		displayUserName();
		userName = borrowedInput.next();

		//returns localUserName to main method
		return userName;
	}//End of getUserName

	//VR method used to obtain password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		displayPassword();
		localPassword = borrowedInput.next();

		//returns localPassword to main method
		return localPassword;
	}//End of getPassword

	//VR Method for validating Main Menu
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';

		//Invokes the void method displayMainMenu
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Validation Loop for Main Menu
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			//Error Message
			System.out.println("\nThe option you input does not exist for this menu.");
			System.out.println("Please re-input your choice of the given options.");

			//Invokes the void method displayMainMenu
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Validation Loop

		//Returns localSelection to main method
		return localSelection;
	}//End of validateMenuSelection

	//VR Method for validating File Menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';

		//Invokes the void method displayMainMenu
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Validation Loop for Main Menu
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			//Error Message
			System.out.println("\nThe option you input does not exist for this menu.");
			System.out.println("Please re-input your choice of the given options.");

			//Invokes the void method displayMainMenu
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Validation Loop

		//Returns localSelection to main method
		return localSelection;
	}//End of validateFileSelection

	//Method used for obtaining fileName
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";

		//Invokes the void method displayFileName
		displayFileName();
		localFileName = borrowedInput.next();

		return localFileName;
	}//End of getFileName

	//Validation Method for searchValue
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;

		//Displays Search Value Prompt
		displaySearchValue();
		localSearchValue = borrowedInput.nextInt();

		//Validation loop for searchValue
		while(localSearchValue < 0)
		{
			//Error Message
			System.out.println("\nIt is impossible for this search value to exist");
			System.out.println("Please re-enter your choice of search value.");

			//Displays Search Value Prompt
			displaySearchValue();
			localSearchValue = borrowedInput.nextInt();
		}//End of Validation Loop

		return localSearchValue;
	}//End of validateSearchValue

	//VR method for validating the variable howMany
	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";

		//User Prompt
		System.out.println("\nHow many units of the searched item");
		System.out.println("are you intending to purchase?");
		localHowMany = borrowedInput.next();

		//Validation Loop for howMany using the String's integer value
		while(Integer.parseInt(localHowMany) <= 0)
		{
			//Error Message
			System.out.println("\nYou have input a quantity that can not exist.");
			System.out.println("Please input your chosen quantity again.");

			//User Prompt
			System.out.println("\nHow many units of the searched item");
			System.out.println("are you intending to purchase?");
			localHowMany = borrowedInput.next();
		}//End of Validation Loop

		//Returns localHowMany to main method
		return localHowMany;
	}//End of validateHowMany

	//VR Method for validating Discount Menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';

		//Invokes the void method displayDiscountMenu
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//Validation loop for Destination Menu
		while (localSelection != 'A' && localSelection !='B' && localSelection != 'C')
		{
			//Error Message
			System.out.println("\nThe option you input does not exist for this menu.");
			System.out.println("Please re-input your choice of the given options.");

			//Invokes the void method displayDiscountMenu
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Validation Loop

		//Returns localSelection to main method
		return localSelection;
	}//End of validateDiscountMenu

	//End of VR methods

}//End of Public class
